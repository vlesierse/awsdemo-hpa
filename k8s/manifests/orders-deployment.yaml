apiVersion: v1
kind: Service
metadata:
  name: orderservice
spec:
  ports:
    - port: 80
      targetPort: 80
      protocol: TCP
  type: LoadBalancer
  selector:
    app: orderservice
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: orderservice-config
data:
  appsettings.json: |-
    {
      "RabbitMQHostName":"b-e294d913-e263-4555-be55-b8aef4ccba5b.mq.eu-west-1.amazonaws.com",
      "RabbitMQUserName":"queueuser"
    }
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: orderservice
spec:
  selector:
    matchLabels:
      app: orderservice
  replicas: 1
  template:
    metadata:
      labels:
        app: orderservice
    spec:
      containers:
      - image: vlesierse/orderservice:1.1.0
        imagePullPolicy: Always
        name: orderservice
        ports:
        - containerPort: 80
        volumeMounts:
        - name: config
          mountPath: /app/config
        env:
        - name: RabbitMQPassword
          valueFrom:
            secretKeyRef:
              name: orderservice-secret
              key: rabbitmq-password
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "128Mi"
            cpu: "100m"
        startupProbe:
          httpGet:
            path: /health/startup
            port: 80
          failureThreshold: 30
          periodSeconds: 10
        livenessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 0
          periodSeconds: 10
          timeoutSeconds: 1
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health/ready
            port: 80
          periodSeconds: 10
          timeoutSeconds: 1
          successThreshold: 2
      volumes:
      - name: config
        configMap:
          name: orderservice-config
      
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: orderprocessor
spec:
  selector:
    matchLabels:
      app: orderprocessor
  replicas: 1
  template:
    metadata:
      labels:
        app: orderprocessor
    spec:
      containers:
      - image: vlesierse/orderprocessor:1.0.2
        imagePullPolicy: Always
        name: orderprocessor
        volumeMounts:
        - name: config
          mountPath: /app/config
        env:
        - name: RabbitMQPassword
          valueFrom:
            secretKeyRef:
              name: orderservice-secret
              key: rabbitmq-password
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "128Mi"
            cpu: "100m"
      volumes:
      - name: config
        configMap:
          name: orderservice-config
---
apiVersion: metrics.aws/v1alpha1
kind: ExternalMetric
metadata:
  name: orders-queue-length
spec:
  name: orders-queue-length
  queries:
    - id: orders_queue_length
      metricStat:
        metric:
          namespace: "AWS/AmazonMQ"
          metricName: "MessageCount"
          dimensions:
            - name: Broker
              value: "awsdemo-hpa"
            - name: VirtualHost
              value: "/"
            - name: Queue
              value: "orders"            
        period: 10
        stat: Average
        unit: Count
      returnData: true
---
kind: HorizontalPodAutoscaler
apiVersion: autoscaling/v2beta2
metadata:
  name: orderprocessor-scaler
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: orderprocessor
  minReplicas: 1
  maxReplicas: 10
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 25
        periodSeconds: 30
  metrics:
  - type: External
    external:
      metric:
        name: orders-queue-length
      target:
        type: AverageValue
        value: 5